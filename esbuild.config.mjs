import esbuild from "esbuild";
import process from "process";
import builtins from 'builtin-modules'
import fs from "fs";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');
const env = JSON.parse(fs.readFileSync('.env'));

// see https://github.com/evanw/esbuild/issues/408#issuecomment-757555771
let wasmPlugin = {
	name: 'wasm',
	setup(build) {
		// Resolve ".wasm" files to a path with a namespace
		build.onResolve({ filter: /\.wasm$/ }, args => {
			if (args.resolveDir === '') {
				return // Ignore unresolvable paths
			}
			return {
				path: path.isAbsolute(args.path) ? args.path : path.join(args.resolveDir, args.path),
				namespace: 'wasm-binary',
			}
		})

		// Virtual modules in the "wasm-binary" namespace contain the
		// actual bytes of the WebAssembly file. This uses esbuild's
		// built-in "binary" loader instead of manually embedding the
		// binary data inside JavaScript code ourselves.
		build.onLoad({ filter: /.*/, namespace: 'wasm-binary' }, async (args) => ({
			contents: await fs.promises.readFile(args.path),
			loader: 'binary',
		}))
	},
}



esbuild.build({
	banner: {
		js: banner,
	},
	plugins: [wasmPlugin],
	entryPoints: ['src/main.ts'],
	bundle: true,
	external: [
		'obsidian', 
		'electron',
		"codemirror",
		"@codemirror/autocomplete",
		"@codemirror/closebrackets",
		"@codemirror/commands",
		"@codemirror/fold",
		"@codemirror/gutter",
		"@codemirror/history",
		"@codemirror/language",
		"@codemirror/rangeset",
		"@codemirror/rectangular-selection",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/stream-parser",
		"@codemirror/text",
		"@codemirror/view",
		...builtins
	],
	format: 'cjs',
	watch: !prod,
	target: 'es2016',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: path.join(env.target_dir, 'main.js')
}).catch(() => process.exit(1))

